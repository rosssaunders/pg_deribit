/*
* AUTO-GENERATED FILE - DO NOT MODIFY
*
* This SQL file was generated by a code generation tool. Any modifications
* made to this file may be overwritten by subsequent code generation
* processes and could lead to inconsistencies or errors in the application.
*
* For any required changes, please modify the source templates or the
* code generation tool's configurations and regenerate this file.
*
* WARNING: MODIFYING THIS FILE DIRECTLY CAN LEAD TO UNEXPECTED BEHAVIOR
* AND IS STRONGLY DISCOURAGED.
*/
create type deribit.public_auth_request_grant_type as enum (
    'client_credentials',
    'client_signature',
    'refresh_token'
);

create type deribit.public_auth_request as (
    "grant_type" deribit.public_auth_request_grant_type,
    "client_id" text,
    "client_secret" text,
    "refresh_token" text,
    "timestamp" bigint,
    "signature" text,
    "nonce" text,
    "data" text,
    "state" text,
    "scope" text
);

comment on column deribit.public_auth_request."grant_type" is '(Required) Method of authentication';
comment on column deribit.public_auth_request."client_id" is '(Required) Required for grant type client_credentials and client_signature';
comment on column deribit.public_auth_request."client_secret" is '(Required) Required for grant type client_credentials';
comment on column deribit.public_auth_request."refresh_token" is '(Required) Required for grant type refresh_token';
comment on column deribit.public_auth_request."timestamp" is '(Required) Required for grant type client_signature, provides time when request has been generated (milliseconds since the UNIX epoch)';
comment on column deribit.public_auth_request."signature" is '(Required) Required for grant type client_signature; it''s a cryptographic signature calculated over provided fields using user secret key. The signature should be calculated as an HMAC (Hash-based Message Authentication Code) with SHA256 hash algorithm';
comment on column deribit.public_auth_request."nonce" is 'Optional for grant type client_signature; delivers user generated initialization vector for the server token';
comment on column deribit.public_auth_request."data" is 'Optional for grant type client_signature; contains any user specific value';
comment on column deribit.public_auth_request."state" is 'Will be passed back in the response';
comment on column deribit.public_auth_request."scope" is 'Describes type of the access for assigned token, possible values: connection, session:name, trade:[read, read_write, none], wallet:[read, read_write, none], account:[read, read_write, none], expires:NUMBER, ip:ADDR. Details are elucidated in Access scope';

create type deribit.public_auth_response_result as (
    "access_token" text,
    "enabled_features" text[],
    "expires_in" bigint,
    "google_login" boolean,
    "mandatory_tfa_status" text,
    "refresh_token" text,
    "scope" text,
    "sid" text,
    "state" text,
    "token_type" text
);

comment on column deribit.public_auth_response_result."enabled_features" is 'List of enabled advanced on-key features. Available options:  - restricted_block_trades: Limit the block_trade read the scope of the API key to block trades that have been made using this specific API key  - block_trade_approval: Block trades created using this API key require additional user approval. Methods that use block_rfq scope are not affected by Block Trade approval feature';
comment on column deribit.public_auth_response_result."expires_in" is 'Token lifetime in seconds';
comment on column deribit.public_auth_response_result."google_login" is 'The access token was acquired by logging in through Google.';
comment on column deribit.public_auth_response_result."mandatory_tfa_status" is '2FA is required for privileged methods';
comment on column deribit.public_auth_response_result."refresh_token" is 'Can be used to request a new token (with a new lifetime)';
comment on column deribit.public_auth_response_result."scope" is 'Type of the access for assigned token';
comment on column deribit.public_auth_response_result."sid" is 'Optional Session id';
comment on column deribit.public_auth_response_result."state" is 'Copied from the input (if applicable)';
comment on column deribit.public_auth_response_result."token_type" is 'Authorization type, allowed value - bearer';

create type deribit.public_auth_response as (
    "id" bigint,
    "jsonrpc" text,
    "result" deribit.public_auth_response_result
);

comment on column deribit.public_auth_response."id" is 'The id that was sent in the request';
comment on column deribit.public_auth_response."jsonrpc" is 'The JSON-RPC version (2.0)';

create function deribit.public_auth(
    "grant_type" deribit.public_auth_request_grant_type,
    "client_id" text,
    "client_secret" text,
    "refresh_token" text,
    "timestamp" bigint,
    "signature" text,
    "nonce" text default null,
    "data" text default null,
    "state" text default null,
    "scope" text default null
)
returns deribit.public_auth_response_result
language sql
as $$
    
    with request as (
        select row(
            "grant_type",
            "client_id",
            "client_secret",
            "refresh_token",
            "timestamp",
            "signature",
            "nonce",
            "data",
            "state",
            "scope"
        )::deribit.public_auth_request as payload
    ), 
    http_response as (
        select deribit.public_jsonrpc_request(
            url := '/public/auth'::deribit.endpoint,
            request := request.payload,
            rate_limiter := 'deribit.non_matching_engine_request_log_call'::name
        ) as http_response
        from request
    )
    select (
        jsonb_populate_record(
            null::deribit.public_auth_response,
            convert_from((a.http_response).body, 'utf-8')::jsonb
        )
    ).result
    from http_response a

$$;

comment on function deribit.public_auth is 'Retrieve an Oauth access token, to be used for authentication of ''private'' requests.';
