/*
* AUTO-GENERATED FILE - DO NOT MODIFY
*
* This SQL file was generated by a code generation tool. Any modifications
* made to this file may be overwritten by subsequent code generation
* processes and could lead to inconsistencies or errors in the application.
*
* For any required changes, please modify the source templates or the
* code generation tool's configurations and regenerate this file.
*
* WARNING: MODIFYING THIS FILE DIRECTLY CAN LEAD TO UNEXPECTED BEHAVIOR
* AND IS STRONGLY DISCOURAGED.
*/
create type deribit.private_verify_block_trade_request_trade_direction as enum (
    'buy',
    'sell'
);

create type deribit.private_verify_block_trade_request_role as enum (
    'maker',
    'taker'
);

create type deribit.private_verify_block_trade_request_trade as (
    "instrument_name" text,
    "price" double precision,
    "amount" double precision,
    "direction" deribit.private_verify_block_trade_request_trade_direction
);

comment on column deribit.private_verify_block_trade_request_trade."instrument_name" is '(Required) Instrument name';
comment on column deribit.private_verify_block_trade_request_trade."price" is '(Required) Price for trade';
comment on column deribit.private_verify_block_trade_request_trade."amount" is 'It represents the requested trade size. For perpetual and futures the amount is in USD units, for options it is the amount of corresponding cryptocurrency contracts, e.g., BTC or ETH';
comment on column deribit.private_verify_block_trade_request_trade."direction" is '(Required) Direction of trade from the maker perspective';

create type deribit.private_verify_block_trade_request as (
    "timestamp" bigint,
    "nonce" text,
    "role" deribit.private_verify_block_trade_request_role,
    "trades" deribit.private_verify_block_trade_request_trade[]
);

comment on column deribit.private_verify_block_trade_request."timestamp" is '(Required) Timestamp, shared with other party (milliseconds since the UNIX epoch)';
comment on column deribit.private_verify_block_trade_request."nonce" is '(Required) Nonce, shared with other party';
comment on column deribit.private_verify_block_trade_request."role" is '(Required) Describes if user wants to be maker or taker of trades';
comment on column deribit.private_verify_block_trade_request."trades" is '(Required) List of trades for block trade';

create type deribit.private_verify_block_trade_response_result as (
    "signature" text
);

comment on column deribit.private_verify_block_trade_response_result."signature" is 'Signature of block trade It is valid only for 5 minutes âaroundâ given timestamp';

create type deribit.private_verify_block_trade_response as (
    "id" bigint,
    "jsonrpc" text,
    "result" deribit.private_verify_block_trade_response_result
);

comment on column deribit.private_verify_block_trade_response."id" is 'The id that was sent in the request';
comment on column deribit.private_verify_block_trade_response."jsonrpc" is 'The JSON-RPC version (2.0)';

create function deribit.private_verify_block_trade(
    auth deribit.auth
,    "timestamp" bigint,
    "nonce" text,
    "role" deribit.private_verify_block_trade_request_role,
    "trades" deribit.private_verify_block_trade_request_trade[]
)
returns deribit.private_verify_block_trade_response_result
language sql
as $$
    
    with request as (
        select row(
            "timestamp",
            "nonce",
            "role",
            "trades"
        )::deribit.private_verify_block_trade_request as payload
    ), 
    http_response as (
        select deribit.private_jsonrpc_request(
            auth := auth,             
            url := '/private/verify_block_trade'::deribit.endpoint, 
            request := request.payload, 
            rate_limiter := 'deribit.matching_engine_request_log_call'::name
        ) as http_response
        from request
    )
    select (jsonb_populate_record(
        null::deribit.private_verify_block_trade_response, 
        convert_from((a.http_response).body, 'utf-8')::jsonb)).result
    from http_response a

$$;

comment on function deribit.private_verify_block_trade is 'Verifies and creates block trade signature';
