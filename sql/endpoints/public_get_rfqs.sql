/*
* AUTO-GENERATED FILE - DO NOT MODIFY
*
* This SQL file was generated by a code generation tool. Any modifications
* made to this file may be overwritten by subsequent code generation
* processes and could lead to inconsistencies or errors in the application.
*
* For any required changes, please modify the source templates or the
* code generation tool's configurations and regenerate this file.
*
* WARNING: MODIFYING THIS FILE DIRECTLY CAN LEAD TO UNEXPECTED BEHAVIOR
* AND IS STRONGLY DISCOURAGED.
*/
create type deribit.public_get_rfqs_request_currency as enum (
    'BTC',
    'ETH',
    'EURR',
    'USDC',
    'USDT'
);

create type deribit.public_get_rfqs_request_kind as enum (
    'future',
    'future_combo',
    'option',
    'option_combo',
    'spot'
);

create type deribit.public_get_rfqs_request as (
    "currency" deribit.public_get_rfqs_request_currency,
    "kind" deribit.public_get_rfqs_request_kind
);

comment on column deribit.public_get_rfqs_request."currency" is '(Required) The currency symbol';
comment on column deribit.public_get_rfqs_request."kind" is 'Instrument kind, if not provided instruments of all kinds are considered';

create type deribit.public_get_rfqs_response_result as (
    "amount" double precision,
    "instrument_name" text,
    "last_rfq_timestamp" bigint,
    "side" text,
    "traded_volume" double precision
);

comment on column deribit.public_get_rfqs_response_result."amount" is 'It represents the requested order size. For perpetual and futures the amount is in USD units, for options it is the amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.';
comment on column deribit.public_get_rfqs_response_result."instrument_name" is 'Unique instrument identifier';
comment on column deribit.public_get_rfqs_response_result."last_rfq_timestamp" is 'The timestamp of last RFQ (milliseconds since the Unix epoch)';
comment on column deribit.public_get_rfqs_response_result."side" is 'Side - buy or sell';
comment on column deribit.public_get_rfqs_response_result."traded_volume" is 'Volume traded since last RFQ';

create type deribit.public_get_rfqs_response as (
    "id" bigint,
    "jsonrpc" text,
    "result" deribit.public_get_rfqs_response_result[]
);

comment on column deribit.public_get_rfqs_response."id" is 'The id that was sent in the request';
comment on column deribit.public_get_rfqs_response."jsonrpc" is 'The JSON-RPC version (2.0)';

create function deribit.public_get_rfqs(
    "currency" deribit.public_get_rfqs_request_currency,
    "kind" deribit.public_get_rfqs_request_kind default null
)
returns setof deribit.public_get_rfqs_response_result
language sql
as $$
    
    with request as (
        select row(
            "currency",
            "kind"
        )::deribit.public_get_rfqs_request as payload
    ), 
    http_response as (
        select deribit.public_jsonrpc_request(
            url := '/public/get_rfqs'::deribit.endpoint,
            request := request.payload,
            rate_limiter := 'deribit.non_matching_engine_request_log_call'::name
        ) as http_response
        from request
    ),
    result as (
        select (jsonb_populate_record(
            null::deribit.public_get_rfqs_response,
            convert_from((http_response.http_response).body, 'utf-8')::jsonb)
        ).result
        from http_response
    )
    select
        (b)."amount"::double precision,
        (b)."instrument_name"::text,
        (b)."last_rfq_timestamp"::bigint,
        (b)."side"::text,
        (b)."traded_volume"::double precision
    from (
        select (unnest(r.data)) b
        from result r(data)
    ) a
    
$$;

comment on function deribit.public_get_rfqs is 'Retrieve active RFQs for instruments in given currency.';
