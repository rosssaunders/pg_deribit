/*
* AUTO-GENERATED FILE - DO NOT MODIFY
*
* This SQL file was generated by a code generation tool. Any modifications
* made to this file may be overwritten by subsequent code generation
* processes and could lead to inconsistencies or errors in the application.
*
* For any required changes, please modify the source templates or the
* code generation tool's configurations and regenerate this file.
*
* WARNING: MODIFYING THIS FILE DIRECTLY CAN LEAD TO UNEXPECTED BEHAVIOR
* AND IS STRONGLY DISCOURAGED.
*/
create type deribit.private_create_combo_request_trade_direction as enum (
    'buy',
    'sell'
);

create type deribit.private_create_combo_request_trade as (
    "instrument_name" text,
    "amount" double precision,
    "direction" deribit.private_create_combo_request_trade_direction
);

comment on column deribit.private_create_combo_request_trade."instrument_name" is '(Required) Instrument name';
comment on column deribit.private_create_combo_request_trade."amount" is 'It represents the requested trade size. For perpetual and inverse futures the amount is in USD units. For options and linear futures and it is the underlying base currency coin.';
comment on column deribit.private_create_combo_request_trade."direction" is '(Required) Direction of trade from the maker perspective';

create type deribit.private_create_combo_request as (
    "trades" deribit.private_create_combo_request_trade[]
);

comment on column deribit.private_create_combo_request."trades" is '(Required) List of trades used to create a combo';

create type deribit.private_create_combo_response_leg as (
    "amount" bigint,
    "instrument_name" text
);

comment on column deribit.private_create_combo_response_leg."amount" is 'Size multiplier of a leg. A negative value indicates that the trades on given leg are in opposite direction to the combo trades they originate from';
comment on column deribit.private_create_combo_response_leg."instrument_name" is 'Unique instrument identifier';

create type deribit.private_create_combo_response_result as (
    "creation_timestamp" bigint,
    "id" text,
    "instrument_id" bigint,
    "legs" deribit.private_create_combo_response_leg[],
    "state" text,
    "state_timestamp" bigint
);

comment on column deribit.private_create_combo_response_result."creation_timestamp" is 'The timestamp (milliseconds since the Unix epoch)';
comment on column deribit.private_create_combo_response_result."id" is 'Unique combo identifier';
comment on column deribit.private_create_combo_response_result."instrument_id" is 'Instrument ID';
comment on column deribit.private_create_combo_response_result."state" is 'Combo state: "active", "inactive"';
comment on column deribit.private_create_combo_response_result."state_timestamp" is 'The timestamp (milliseconds since the Unix epoch)';

create type deribit.private_create_combo_response as (
    "id" bigint,
    "jsonrpc" text,
    "result" deribit.private_create_combo_response_result
);

comment on column deribit.private_create_combo_response."id" is 'The id that was sent in the request';
comment on column deribit.private_create_combo_response."jsonrpc" is 'The JSON-RPC version (2.0)';

create function deribit.private_create_combo(
    "trades" deribit.private_create_combo_request_trade[]
)
returns deribit.private_create_combo_response_result
language sql
as $$
    
    with request as (
        select row(
            "trades"
        )::deribit.private_create_combo_request as payload
    ), 
    http_response as (
        select deribit.private_jsonrpc_request(
            auth := deribit.get_auth(),
            url := '/private/create_combo'::deribit.endpoint,
            request := request.payload,
            rate_limiter := 'deribit.non_matching_engine_request_log_call'::name
        ) as http_response
        from request
    )
    select (
        jsonb_populate_record(
            null::deribit.private_create_combo_response,
            convert_from((a.http_response).body, 'utf-8')::jsonb
        )
    ).result
    from http_response a

$$;

comment on function deribit.private_create_combo is 'Verifies and creates a combo book or returns an existing combo matching given trades';
