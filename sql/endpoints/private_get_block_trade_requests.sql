/*
* AUTO-GENERATED FILE - DO NOT MODIFY
*
* This SQL file was generated by a code generation tool. Any modifications
* made to this file may be overwritten by subsequent code generation
* processes and could lead to inconsistencies or errors in the application.
*
* For any required changes, please modify the source templates or the
* code generation tool's configurations and regenerate this file.
*
* WARNING: MODIFYING THIS FILE DIRECTLY CAN LEAD TO UNEXPECTED BEHAVIOR
* AND IS STRONGLY DISCOURAGED.
*/
create type deribit.private_get_block_trade_requests_request as (
    "broker_code" text
);

comment on column deribit.private_get_block_trade_requests_request."broker_code" is 'Broker code to filter block trade requests. Only broker clients can use broker_code to query for their executed broker block trades.';

create type deribit.private_get_block_trade_requests_response_trade as (
    "amount" double precision,
    "direction" text,
    "instrument_name" text,
    "price" double precision
);

comment on column deribit.private_get_block_trade_requests_response_trade."amount" is 'Trade amount. For perpetual and inverse futures the amount is in USD units. For options and linear futures and it is the underlying base currency coin.';
comment on column deribit.private_get_block_trade_requests_response_trade."direction" is 'Direction: buy, or sell';
comment on column deribit.private_get_block_trade_requests_response_trade."instrument_name" is 'Unique instrument identifier';
comment on column deribit.private_get_block_trade_requests_response_trade."price" is 'Price in base currency';

create type deribit.private_get_block_trade_requests_response_state as (
    "timestamp" bigint,
    "value" text
);

comment on column deribit.private_get_block_trade_requests_response_state."timestamp" is 'State timestamp.';
comment on column deribit.private_get_block_trade_requests_response_state."value" is 'State value.';

create type deribit.private_get_block_trade_requests_response_counterparty_state as (
    "timestamp" bigint,
    "value" text
);

comment on column deribit.private_get_block_trade_requests_response_counterparty_state."timestamp" is 'State timestamp.';
comment on column deribit.private_get_block_trade_requests_response_counterparty_state."value" is 'State value.';

create type deribit.private_get_block_trade_requests_response_result as (
    "app_name" text,
    "broker_code" text,
    "broker_name" text,
    "combo_id" text,
    "counterparty_state" deribit.private_get_block_trade_requests_response_counterparty_state,
    "nonce" text,
    "role" text,
    "state" deribit.private_get_block_trade_requests_response_state,
    "timestamp" bigint,
    "trades" deribit.private_get_block_trade_requests_response_trade[],
    "user_id" bigint,
    "username" text
);

comment on column deribit.private_get_block_trade_requests_response_result."app_name" is 'The name of the application that executed the block trade on behalf of the user (optional).';
comment on column deribit.private_get_block_trade_requests_response_result."broker_code" is 'Broker code associated with the broker block trade.';
comment on column deribit.private_get_block_trade_requests_response_result."broker_name" is 'Name of the broker associated with the block trade.';
comment on column deribit.private_get_block_trade_requests_response_result."combo_id" is 'Combo instrument identifier';
comment on column deribit.private_get_block_trade_requests_response_result."counterparty_state" is 'State of the pending block trade for the other party (optional).';
comment on column deribit.private_get_block_trade_requests_response_result."nonce" is 'Nonce that can be used to approve or reject pending block trade.';
comment on column deribit.private_get_block_trade_requests_response_result."role" is 'Trade role of the user: maker or taker';
comment on column deribit.private_get_block_trade_requests_response_result."state" is 'State of the pending block trade for current user.';
comment on column deribit.private_get_block_trade_requests_response_result."timestamp" is 'Timestamp that can be used to approve or reject pending block trade.';
comment on column deribit.private_get_block_trade_requests_response_result."user_id" is 'Unique user identifier';
comment on column deribit.private_get_block_trade_requests_response_result."username" is 'Username of the user who initiated the block trade.';

create type deribit.private_get_block_trade_requests_response as (
    "id" bigint,
    "jsonrpc" text,
    "result" deribit.private_get_block_trade_requests_response_result[]
);

comment on column deribit.private_get_block_trade_requests_response."id" is 'The id that was sent in the request';
comment on column deribit.private_get_block_trade_requests_response."jsonrpc" is 'The JSON-RPC version (2.0)';

create function deribit.private_get_block_trade_requests(
    "broker_code" text default null
)
returns setof deribit.private_get_block_trade_requests_response_result
language sql
as $$
    
    with request as (
        select row(
            "broker_code"
        )::deribit.private_get_block_trade_requests_request as payload
    ), 
    http_response as (
        select deribit.private_jsonrpc_request(
            auth := deribit.get_auth(),
            url := '/private/get_block_trade_requests'::deribit.endpoint,
            request := request.payload,
            rate_limiter := 'deribit.non_matching_engine_request_log_call'::name
        ) as http_response
        from request
    ),
    result as (
        select (jsonb_populate_record(
            null::deribit.private_get_block_trade_requests_response,
            convert_from((http_response.http_response).body, 'utf-8')::jsonb)
        ).result
        from http_response
    )
    select
        (b)."app_name"::text,
        (b)."broker_code"::text,
        (b)."broker_name"::text,
        (b)."combo_id"::text,
        (b)."counterparty_state"::deribit.private_get_block_trade_requests_response_counterparty_state,
        (b)."nonce"::text,
        (b)."role"::text,
        (b)."state"::deribit.private_get_block_trade_requests_response_state,
        (b)."timestamp"::bigint,
        (b)."trades"::deribit.private_get_block_trade_requests_response_trade[],
        (b)."user_id"::bigint,
        (b)."username"::text
    from (
        select (unnest(r.data)) b
        from result r(data)
    ) a
    
$$;

comment on function deribit.private_get_block_trade_requests is 'Provides a list of block trade requests including pending approvals, declined trades, and expired trades. timestamp and nonce received in response can be used to approve or reject the pending block trade. To use a block trade approval feature the additional API key setting feature called: enabled_features: block_trade_approval is required. This key has to be given to broker/registered partner who performs the trades on behalf of the user for the feature to be active. If the user wants to approve the trade, he has to approve it from different API key with doesn''t have this feature enabled. Only broker clients can use broker_code to query for their broker block trade requests.';
