/*
* AUTO-GENERATED FILE - DO NOT MODIFY
*
* This SQL file was generated by a code generation tool. Any modifications
* made to this file may be overwritten by subsequent code generation
* processes and could lead to inconsistencies or errors in the application.
*
* For any required changes, please modify the source templates or the
* code generation tool's configurations and regenerate this file.
*
* WARNING: MODIFYING THIS FILE DIRECTLY CAN LEAD TO UNEXPECTED BEHAVIOR
* AND IS STRONGLY DISCOURAGED.
*/
create type deribit.public_get_combo_details_request as (
    "combo_id" text
);

comment on column deribit.public_get_combo_details_request."combo_id" is '(Required) Combo ID';

create type deribit.public_get_combo_details_response_leg as (
    "amount" bigint,
    "instrument_name" text
);

comment on column deribit.public_get_combo_details_response_leg."amount" is 'Size multiplier of a leg. A negative value indicates that the trades on given leg are in opposite direction to the combo trades they originate from';
comment on column deribit.public_get_combo_details_response_leg."instrument_name" is 'Unique instrument identifier';

create type deribit.public_get_combo_details_response_result as (
    "creation_timestamp" bigint,
    "id" text,
    "instrument_id" bigint,
    "legs" deribit.public_get_combo_details_response_leg[],
    "state" text,
    "state_timestamp" bigint
);

comment on column deribit.public_get_combo_details_response_result."creation_timestamp" is 'The timestamp (milliseconds since the Unix epoch)';
comment on column deribit.public_get_combo_details_response_result."id" is 'Unique combo identifier';
comment on column deribit.public_get_combo_details_response_result."instrument_id" is 'Instrument ID';
comment on column deribit.public_get_combo_details_response_result."state" is 'Combo state: "rfq", "active", "inactive"';
comment on column deribit.public_get_combo_details_response_result."state_timestamp" is 'The timestamp (milliseconds since the Unix epoch)';

create type deribit.public_get_combo_details_response as (
    "id" bigint,
    "jsonrpc" text,
    "result" deribit.public_get_combo_details_response_result
);

comment on column deribit.public_get_combo_details_response."id" is 'The id that was sent in the request';
comment on column deribit.public_get_combo_details_response."jsonrpc" is 'The JSON-RPC version (2.0)';

create function deribit.public_get_combo_details(    "combo_id" text
)
returns deribit.public_get_combo_details_response_result
language sql
as $$
    
    with request as (
        select row(
            "combo_id"
        )::deribit.public_get_combo_details_request as payload
    ), 
    http_response as (
        select deribit.public_jsonrpc_request(            
            url := '/public/get_combo_details'::deribit.endpoint, 
            request := request.payload, 
            rate_limiter := 'deribit.non_matching_engine_request_log_call'::name
        ) as http_response
        from request
    )
    select (jsonb_populate_record(
        null::deribit.public_get_combo_details_response, 
        convert_from((a.http_response).body, 'utf-8')::jsonb)).result
    from http_response a

$$;

comment on function deribit.public_get_combo_details is 'Retrieves information about a combo';
