/*
* AUTO-GENERATED FILE - DO NOT MODIFY
*
* This SQL file was generated by a code generation tool. Any modifications
* made to this file may be overwritten by subsequent code generation
* processes and could lead to inconsistencies or errors in the application.
*
* For any required changes, please modify the source templates or the
* code generation tool's configurations and regenerate this file.
*
* WARNING: MODIFYING THIS FILE DIRECTLY CAN LEAD TO UNEXPECTED BEHAVIOR
* AND IS STRONGLY DISCOURAGED.
*/
create type deribit.public_get_combos_request_currency as enum (
    'BTC',
    'ETH',
    'EURR',
    'USDC',
    'USDT',
    'any'
);

create type deribit.public_get_combos_request as (
    "currency" deribit.public_get_combos_request_currency
);

comment on column deribit.public_get_combos_request."currency" is '(Required) The currency symbol or "any" for all';

create type deribit.public_get_combos_response_leg as (
    "amount" bigint,
    "instrument_name" text
);

comment on column deribit.public_get_combos_response_leg."amount" is 'Size multiplier of a leg. A negative value indicates that the trades on given leg are in opposite direction to the combo trades they originate from';
comment on column deribit.public_get_combos_response_leg."instrument_name" is 'Unique instrument identifier';

create type deribit.public_get_combos_response_result as (
    "creation_timestamp" bigint,
    "id" text,
    "instrument_id" bigint,
    "legs" deribit.public_get_combos_response_leg[],
    "state" text,
    "state_timestamp" bigint
);

comment on column deribit.public_get_combos_response_result."creation_timestamp" is 'The timestamp (milliseconds since the Unix epoch)';
comment on column deribit.public_get_combos_response_result."id" is 'Unique combo identifier';
comment on column deribit.public_get_combos_response_result."instrument_id" is 'Instrument ID';
comment on column deribit.public_get_combos_response_result."state" is 'Combo state: "active", "inactive"';
comment on column deribit.public_get_combos_response_result."state_timestamp" is 'The timestamp (milliseconds since the Unix epoch)';

create type deribit.public_get_combos_response as (
    "id" bigint,
    "jsonrpc" text,
    "result" deribit.public_get_combos_response_result[]
);

comment on column deribit.public_get_combos_response."id" is 'The id that was sent in the request';
comment on column deribit.public_get_combos_response."jsonrpc" is 'The JSON-RPC version (2.0)';

create function deribit.public_get_combos(
    "currency" deribit.public_get_combos_request_currency
)
returns setof deribit.public_get_combos_response_result
language sql
as $$
    
    with request as (
        select row(
            "currency"
        )::deribit.public_get_combos_request as payload
    ), 
    http_response as (
        select deribit.public_jsonrpc_request(
            url := '/public/get_combos'::deribit.endpoint,
            request := request.payload,
            rate_limiter := 'deribit.non_matching_engine_request_log_call'::name
        ) as http_response
        from request
    ),
    result as (
        select (jsonb_populate_record(
            null::deribit.public_get_combos_response,
            convert_from((http_response.http_response).body, 'utf-8')::jsonb)
        ).result
        from http_response
    )
    select
        (b)."creation_timestamp"::bigint,
        (b)."id"::text,
        (b)."instrument_id"::bigint,
        (b)."legs"::deribit.public_get_combos_response_leg[],
        (b)."state"::text,
        (b)."state_timestamp"::bigint
    from (
        select (unnest(r.data)) b
        from result r(data)
    ) a
    
$$;

comment on function deribit.public_get_combos is 'Retrieves information about active combos';
