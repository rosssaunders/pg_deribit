/*
* AUTO-GENERATED FILE - DO NOT MODIFY
*
* This SQL file was generated by a code generation tool. Any modifications
* made to this file may be overwritten by subsequent code generation
* processes and could lead to inconsistencies or errors in the application.
*
* For any required changes, please modify the source templates or the
* code generation tool's configurations and regenerate this file.
*
* WARNING: MODIFYING THIS FILE DIRECTLY CAN LEAD TO UNEXPECTED BEHAVIOR
* AND IS STRONGLY DISCOURAGED.
*/
create type deribit.private_get_positions_request_currency as enum (
    'BTC',
    'ETH',
    'EURR',
    'USDC',
    'USDT',
    'any'
);

create type deribit.private_get_positions_request_kind as enum (
    'future',
    'future_combo',
    'option',
    'option_combo',
    'spot'
);

create type deribit.private_get_positions_request as (
    "currency" deribit.private_get_positions_request_currency,
    "kind" deribit.private_get_positions_request_kind,
    "subaccount_id" bigint
);

comment on column deribit.private_get_positions_request."currency" is 'nan';
comment on column deribit.private_get_positions_request."kind" is 'Kind filter on positions';
comment on column deribit.private_get_positions_request."subaccount_id" is 'The user id for the subaccount';

create type deribit.private_get_positions_response_result as (
    "average_price" double precision,
    "average_price_usd" double precision,
    "delta" double precision,
    "direction" text,
    "estimated_liquidation_price" double precision,
    "floating_profit_loss" double precision,
    "floating_profit_loss_usd" double precision,
    "gamma" double precision,
    "index_price" double precision,
    "initial_margin" double precision,
    "instrument_name" text,
    "interest_value" double precision,
    "kind" text,
    "leverage" bigint,
    "maintenance_margin" double precision,
    "mark_price" double precision,
    "open_orders_margin" double precision,
    "realized_funding" double precision,
    "realized_profit_loss" double precision,
    "settlement_price" double precision,
    "size" double precision,
    "size_currency" double precision,
    "theta" double precision,
    "total_profit_loss" double precision,
    "vega" double precision
);

comment on column deribit.private_get_positions_response_result."average_price" is 'Average price of trades that built this position';
comment on column deribit.private_get_positions_response_result."average_price_usd" is 'Only for options, average price in USD';
comment on column deribit.private_get_positions_response_result."delta" is 'Delta parameter';
comment on column deribit.private_get_positions_response_result."direction" is 'Direction: buy, sell or zero';
comment on column deribit.private_get_positions_response_result."estimated_liquidation_price" is 'Estimated liquidation price, added only for futures, for non portfolio margining users';
comment on column deribit.private_get_positions_response_result."floating_profit_loss" is 'Floating profit or loss';
comment on column deribit.private_get_positions_response_result."floating_profit_loss_usd" is 'Only for options, floating profit or loss in USD';
comment on column deribit.private_get_positions_response_result."gamma" is 'Only for options, Gamma parameter';
comment on column deribit.private_get_positions_response_result."index_price" is 'Current index price';
comment on column deribit.private_get_positions_response_result."initial_margin" is 'Initial margin';
comment on column deribit.private_get_positions_response_result."instrument_name" is 'Unique instrument identifier';
comment on column deribit.private_get_positions_response_result."interest_value" is 'Value used to calculate realized_funding (perpetual only)';
comment on column deribit.private_get_positions_response_result."kind" is 'Instrument kind: "future", "option", "spot", "future_combo", "option_combo"';
comment on column deribit.private_get_positions_response_result."leverage" is 'Current available leverage for future position';
comment on column deribit.private_get_positions_response_result."maintenance_margin" is 'Maintenance margin';
comment on column deribit.private_get_positions_response_result."mark_price" is 'Current mark price for position''s instrument';
comment on column deribit.private_get_positions_response_result."open_orders_margin" is 'Open orders margin';
comment on column deribit.private_get_positions_response_result."realized_funding" is 'Realized Funding in current session included in session realized profit or loss, only for positions of perpetual instruments';
comment on column deribit.private_get_positions_response_result."realized_profit_loss" is 'Realized profit or loss';
comment on column deribit.private_get_positions_response_result."settlement_price" is 'Optional (not added for spot). Last settlement price for position''s instrument 0 if instrument wasn''t settled yet';
comment on column deribit.private_get_positions_response_result."size" is 'Position size for futures size in quote currency (e.g. USD), for options size is in base currency (e.g. BTC)';
comment on column deribit.private_get_positions_response_result."size_currency" is 'Only for futures, position size in base currency';
comment on column deribit.private_get_positions_response_result."theta" is 'Only for options, Theta parameter';
comment on column deribit.private_get_positions_response_result."total_profit_loss" is 'Profit or loss from position';
comment on column deribit.private_get_positions_response_result."vega" is 'Only for options, Vega parameter';

create type deribit.private_get_positions_response as (
    "id" bigint,
    "jsonrpc" text,
    "result" deribit.private_get_positions_response_result[]
);

comment on column deribit.private_get_positions_response."id" is 'The id that was sent in the request';
comment on column deribit.private_get_positions_response."jsonrpc" is 'The JSON-RPC version (2.0)';

create function deribit.private_get_positions(
    auth deribit.auth
,    "currency" deribit.private_get_positions_request_currency default null,
    "kind" deribit.private_get_positions_request_kind default null,
    "subaccount_id" bigint default null
)
returns setof deribit.private_get_positions_response_result
language sql
as $$
    
    with request as (
        select row(
            "currency",
            "kind",
            "subaccount_id"
        )::deribit.private_get_positions_request as payload
    ), 
    http_response as (
        select deribit.private_jsonrpc_request(
            auth := auth,             
            url := '/private/get_positions'::deribit.endpoint, 
            request := request.payload, 
            rate_limiter := 'deribit.non_matching_engine_request_log_call'::name
        ) as http_response
        from request
    )
        , result as (
select (jsonb_populate_record(
                        null::deribit.private_get_positions_response,
                        convert_from((http_response.http_response).body, 'utf-8')::jsonb)
             ).result
        from http_response
    )
    select
        (b)."average_price"::double precision,
        (b)."average_price_usd"::double precision,
        (b)."delta"::double precision,
        (b)."direction"::text,
        (b)."estimated_liquidation_price"::double precision,
        (b)."floating_profit_loss"::double precision,
        (b)."floating_profit_loss_usd"::double precision,
        (b)."gamma"::double precision,
        (b)."index_price"::double precision,
        (b)."initial_margin"::double precision,
        (b)."instrument_name"::text,
        (b)."interest_value"::double precision,
        (b)."kind"::text,
        (b)."leverage"::bigint,
        (b)."maintenance_margin"::double precision,
        (b)."mark_price"::double precision,
        (b)."open_orders_margin"::double precision,
        (b)."realized_funding"::double precision,
        (b)."realized_profit_loss"::double precision,
        (b)."settlement_price"::double precision,
        (b)."size"::double precision,
        (b)."size_currency"::double precision,
        (b)."theta"::double precision,
        (b)."total_profit_loss"::double precision,
        (b)."vega"::double precision
    from (
        select (unnest(r.data)) b
        from result r(data)
    ) a
    
$$;

comment on function deribit.private_get_positions is 'Retrieve user positions. To retrieve subaccount positions, use subaccount_id parameter.';
