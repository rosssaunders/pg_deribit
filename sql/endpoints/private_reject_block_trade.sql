/*
* AUTO-GENERATED FILE - DO NOT MODIFY
*
* This SQL file was generated by a code generation tool. Any modifications
* made to this file may be overwritten by subsequent code generation
* processes and could lead to inconsistencies or errors in the application.
*
* For any required changes, please modify the source templates or the
* code generation tool's configurations and regenerate this file.
*
* WARNING: MODIFYING THIS FILE DIRECTLY CAN LEAD TO UNEXPECTED BEHAVIOR
* AND IS STRONGLY DISCOURAGED.
*/
create type deribit.private_reject_block_trade_request_role as enum (
    'maker',
    'taker'
);

create type deribit.private_reject_block_trade_request as (
    "timestamp" bigint,
    "nonce" text,
    "role" deribit.private_reject_block_trade_request_role
);

comment on column deribit.private_reject_block_trade_request."timestamp" is '(Required) Timestamp, shared with other party (milliseconds since the UNIX epoch)';
comment on column deribit.private_reject_block_trade_request."nonce" is '(Required) Nonce, shared with other party';
comment on column deribit.private_reject_block_trade_request."role" is '(Required) Describes if user wants to be maker or taker of trades';

create type deribit.private_reject_block_trade_response as (
    "id" bigint,
    "jsonrpc" text,
    "result" text
);

comment on column deribit.private_reject_block_trade_response."id" is 'The id that was sent in the request';
comment on column deribit.private_reject_block_trade_response."jsonrpc" is 'The JSON-RPC version (2.0)';
comment on column deribit.private_reject_block_trade_response."result" is 'Result of method execution. ok in case of success';

create function deribit.private_reject_block_trade(
    "timestamp" bigint,
    "nonce" text,
    "role" deribit.private_reject_block_trade_request_role
)
returns text
language sql
as $$
    
    with request as (
        select row(
            "timestamp",
            "nonce",
            "role"
        )::deribit.private_reject_block_trade_request as payload
    ), 
    http_response as (
        select deribit.private_jsonrpc_request(
            auth := deribit.get_auth(),
            url := '/private/reject_block_trade'::deribit.endpoint,
            request := request.payload,
            rate_limiter := 'deribit.non_matching_engine_request_log_call'::name
        ) as http_response
        from request
    )
    select (
        jsonb_populate_record(
            null::deribit.private_reject_block_trade_response,
            convert_from((a.http_response).body, 'utf-8')::jsonb
        )
    ).result
    from http_response a

$$;

comment on function deribit.private_reject_block_trade is 'Used to reject a pending block trade. nonce and timestamp are used to identify the block trade while role should be opposite to the trading counterparty. To use a block trade approval feature the additional API key setting feature called: enabled_features: block_trade_approval is required. This key has to be given to broker/registered partner who performs the trades on behalf of the user for the feature to be active. If the user wants to approve the trade, he has to approve it from different API key with doesn''t have this feature enabled.';
